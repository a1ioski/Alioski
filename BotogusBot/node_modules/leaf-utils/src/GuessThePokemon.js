const {
    MessageEmbed,
    MessageButton,
    MessageActionRow,
    MessageAttachment,
} = require("discord.js");
const fetch = require("node-fetch");

module.exports = async (options) => {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (!options.time) options.time = 60000;
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");

    if (!options.embed) options.embed = {};
    if (!options.embed.title) options.embed.title = "Guess The Pokemon";
    if (!options.embed.description)
        options.embed.description =
            "Type in chat what you think the pokemon is";
    if (!options.embed.color) options.embed.color = "RANDOM";
    if (!options.embed.stopcolor) options.embed.stopcolor = "RED";

    if (!options.button) options.button = {};
    if (!options.button.label) options.button.label = "Forfeit";
    if (!options.button.style) options.button.style = "DANGER";
    if (!options.button.emoji) options.button.emoji = null;

    if (!options.correctMessage)
        options.correctMessage =
            "GG! You guessed the correct pokemon. It was {{pokemon}}";
    if (!options.wrongMessage)
        options.wrongMessage = "Wrong. It was {{pokemon}}";
    if (!options.stopMessage)
        options.stopMessage =
            "You have ended the game, the correct pokemon was {{pokemon}}";
    if (!options.authorOnly)
        options.authorOnly = "Only <@{{author}}> can use this button!";

    async function sendMessage(content) {
        if (options.slash_command) return options.message.editReply(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    // thanks to this homie for the api
    const { data } = await fetch("https://api.aniketdev.cf/pokemon").then(
        (res) => res.json()
    );
    const attachment = new MessageAttachment(
        data.hiddenImage,
        "question-image.png"
    );
    const attachment2 = new MessageAttachment(data.image, "answer-image.png");

    const start = new MessageEmbed()
        .setTitle(options.embed.title)
        .setDescription(options.embed.description)
        .addField("Type(s)", data.types.join(", ") || "No type.")
        .addField("Abilities", data.abilities.join(", ") || "No ability.")
        .setImage("attachment://question-image.png")
        .setColor(options.embed.color);

    const correct = new MessageEmbed()
        .setTitle(options.embed.title)
        .setDescription(
            options.correctMessage.replace("{{pokemon}}", data.name)
        )
        .setImage("attachment://answer-image.png")
        .setColor(options.embed.color);

    const stopped = new MessageEmbed()
        .setTitle(options.embed.title)
        .setDescription(options.stopMessage.replace("{{pokemon}}", data.name))
        .setImage("attachment://answer-image.png")
        .setColor(options.embed.stopcolor);

    const btn = new MessageActionRow().addComponents(
        new MessageButton()
            .setLabel(options.button.label)
            .setEmoji(options.button.emoji)
            .setStyle(options.button.style)
            .setCustomId("stop")
    );

    const msg = await sendMessage({
        embeds: [start],
        files: [attachment],
        components: [btn],
    });

    const filter = (m) => m.author.id === options.message.author.id;
    const collector = options.message.channel.createMessageCollector({
        filter,
        time: options.time,
    });

    collector.on("collect", async (message) => {
        collector.stop();
        btn.components[0].setDisabled(true);
        const choice = message.content.toLowerCase();

        if (choice === `${data.name.toLowerCase()}`) {
            return msg.edit({
                embeds: [correct],
                files: [attachment2],
                components: [btn],
            });
        } else if (choice !== `${data.name.toLowerCase()}`) {
            return msg.edit({
                content: options.wrongMessage.replace("{{pokemon}}", data.name),
                files: [attachment2],
                embeds: [],
                components: [btn],
            });
        }
    });

    const collector2 = msg.createMessageComponentCollector({
        time: options.time,
    });

    collector2.on("collect", async (i) => {
        if (i.user.id !== options.message.author.id)
            return i.reply({
                content: options.authorOnly.replace(
                    "{{author}}",
                    options.message.member.id
                ),
                ephemeral: true,
            });

        collector.stop();
        collector2.stop();

        await i.deferUpdate();

        if (i.customId === "stop") {
            btn.components[0].setDisabled(true);
            return i.message.edit({
                embeds: [stopped],
                files: [attachment2],
                components: [btn],
            });
        }
    });
};
