const Discord = require("discord.js");

module.exports = async (options) => {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (!options.time) options.time = 300000;
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");

    if (!options.embed) options.embed = {};
    if (!options.embed.title) options.embed.title = "Match the Couples";
    if (!options.embed.color) options.embed.color = "RANDOM";

    if (!options.colors) options.colors = {};
    if (!options.colors.correct) options.colors.correct = "SUCCESS";
    if (!options.colors.middle) options.colors.middle = "PRIMARY";
    if (!options.colors.wrong) options.colors.wrong = "DANGER";

    if (!options.winMessage) options.winMessage = "Congrats {{user}}! You win.";
    if (!options.endMessage)
        options.endMessage = "Time is up! Game stopped due to inactivity.";
    if (!options.authorOnly)
        options.authorOnly = "Only <@{{author}}> can use these buttons!";

    async function sendMessage(content) {
        if (options.slash_command) return options.message.editReply(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    let emojis = [
        "🍇",
        "🍈",
        "🍉",
        "🍊",
        "🍋",
        "🍌",
        "🍍",
        "🥭",
        "🍎",
        "🍏",
        "🍐",
        "🍑",
        "🍒",
        "🍓",
        "🫐",
        "🥝",
        "🍅",
        "🫒",
        "🥥",
        "🥑",
        "🍆",
        "🥔",
        "🥕",
        "🌽",
        "🌶",
        "🫑",
        "🥒",
        "🥬",
        "🥦",
        "🧄",
        "🧅",
        "🍄",
        "🥜",
        "🌰",
        "🍞",
        "🥐",
        "🥖",
        "🫓",
        "🥨",
        "🥯",
        "🥞",
        "🧇",
        "🧀",
        "🍖",
        "🍗",
        "🥩",
        "🥓",
        "🍔",
        "🍟",
        "🍕",
        "🌭",
        "🥪",
        "🌮",
        "🌯",
        "🫔",
        "🥙",
        "🧆",
        "🥚",
        "🍳",
        "🥘",
        "🍲",
        "🫕",
        "🥣",
        "🥗",
        "🍿",
        "🧈",
        "🧂",
        "🥫",
        "🍱",
        "🍘",
        "🍙",
        "🍚",
        "🍛",
        "🍜",
        "🍝",
        "🍠",
        "🍢",
        "🍣",
        "🍤",
        "🍥",
        "🥮",
        "🍡",
        "🥟",
        "🥠",
        "🥡",
        "🦪",
        "🍦",
        "🍧",
        "🍨",
        "🍩",
        "🍪",
        "🎂",
        "🍰",
        "🧁",
        "🥧",
        "🍫",
        "🍬",
        "🍭",
        "🍮",
        "🍯",
        "🍼",
        "🥛",
        "☕",
        "🫖",
        "🍵",
        "🍶",
        "🍾",
        "🍷",
        "🍸",
        "🍹",
        "🍺",
        "🍻",
        "🥂",
        "🥃",
        "🥤",
        "🧋",
        "🧃",
        "🧉",
        "🧊",
        "🥢",
        "🍽",
        "🍴",
        "🥄",
    ];
    const button = [];
    const row = [];

    for (var i = emojis.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = emojis[i];
        emojis[i] = emojis[j];
        emojis[j] = temp;
    }

    emojis.splice(12);
    emojis = emojis.concat(emojis);

    for (var i = emojis.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = emojis[i];
        emojis[i] = emojis[j];
        emojis[j] = temp;
    }

    var num = [];
    while (num.length < 24) {
        var r = Math.floor(Math.random() * 24);
        if (num.indexOf(r) === -1) num.push(r);
    }

    for (let i = 0; i < 24; i++) {
        button[num[i]] = new Discord.MessageButton()
            .setCustomId(num[i].toString())
            .setLabel(" ")
            .setStyle("SECONDARY");
        button[num[i]]._emoji = emojis[num[i]];
    }

    let remaining = 12;
    const lastButton = new Discord.MessageButton()
        .setCustomId("24")
        .setLabel("12")
        .setStyle("SECONDARY")
        .setDisabled(true);
    button[24] = lastButton;

    for (let i = 0; i < 25; i += 5) {
        row[i / 5] = new Discord.MessageActionRow().addComponents(
            button[i],
            button[i + 1],
            button[i + 2],
            button[i + 3],
            button[i + 4]
        );
    }

    const embed = new Discord.MessageEmbed()
        .setTitle(options.embed.title)
        .setColor(options.embed.color);

    const sent = await sendMessage({
        embeds: [embed],
        components: [row[0], row[1], row[2], row[3], row[4]],
    });

    let already = false;
    let previousId = "";
    let previousEmoji = "";

    const collector = sent.createMessageComponentCollector({
        componentType: "BUTTON",
        time: options.time,
    });

    collector.on("collect", (c) => {
        if (c.user.id !== options.message.author.id)
            return c.reply({
                content: options.authorOnly.replace(
                    "{{author}}",
                    options.message.member.id
                ),
                ephemeral: true,
            });

        if (c.customId === previousId) return;
        else
            collector.resetTimer({
                time: options.time,
            });

        c.deferUpdate();

        if (!already) {
            previousId = c.customId;
            previousEmoji = button[c.customId]._emoji;

            button[c.customId]
                .setDisabled(false)
                .setStyle(options.colors.middle)
                .setEmoji(button[c.customId]._emoji);

            sent.edit({
                components: [row[0], row[1], row[2], row[3], row[4]],
            });

            already = !already;
        } else {
            if (previousEmoji === button[c.customId]._emoji) {
                remaining--;
                if (remaining === 0) {
                    collector.stop();
                    lastButton.setLabel("WON").setStyle(options.colors.correct);
                } else lastButton.setLabel(remaining.toString());
                button[c.customId]
                    .setDisabled(true)
                    .setStyle(options.colors.correct)
                    .setEmoji(button[c.customId]._emoji);
                button[previousId]
                    .setDisabled(true)
                    .setStyle(options.colors.correct);
                sent.edit({
                    components: [row[0], row[1], row[2], row[3], row[4]],
                });
                already = !already;
            } else {
                button[c.customId]
                    .setDisabled(false)
                    .setStyle(options.colors.wrong)
                    .setEmoji(button[c.customId]._emoji);
                button[previousId].setStyle(options.colors.wrong);
                sent.edit({
                    components: [row[0], row[1], row[2], row[3], row[4]],
                });
                already = !already;
                button[c.customId]
                    .setDisabled(false)
                    .setStyle("SECONDARY")
                    .setEmoji();
                button[previousId]
                    .setDisabled(false)
                    .setStyle("SECONDARY")
                    .setEmoji();
            }
        }
    });

    collector.on("end", (collected, reason) => {
        if (reason === "time") {
            for (let i = 0; i < 25; i++) {
                button[i].setDisabled(true);
            }
            embed.setDescription(options.endMessage);
        } else
            embed.setDescription(
                options.winMessage.replace("{{user}}", options.message.member)
            );
        sent.edit({
            embeds: [embed],
            components: [row[0], row[1], row[2], row[3], row[4]],
        });
    });
};
