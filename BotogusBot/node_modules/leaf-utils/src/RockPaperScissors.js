const { MessageEmbed, MessageButton, MessageActionRow } = require("discord.js");
const { disableButtons } = require("../functions");
const cd = new Set();

module.exports = async (options) => {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (!options.time) options.time = 60000;
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");

    if (!options.embed) options.embed = {};
    if (!options.embed.title) options.embed.title = "Rock Paper Scissors";
    if (!options.embed.description)
        options.embed.description =
            "You have 3 minutes to beat the bot. **Get 3 points to win**";
    if (!options.embed.color) options.embed.color = "RANDOM";

    if (!options.emojis) options.emojis = {};
    if (!options.emojis.rock) options.emojis.rock = "🪨";
    if (!options.emojis.paper) options.emojis.paper = "📰";
    if (!options.emojis.scissors) options.emojis.scissors = "✂️";

    if (!options.colors) options.colors = {};
    if (!options.colors.rock) options.colors.rock = "PRIMARY";
    if (!options.colors.paper) options.colors.paper = "DANGER";
    if (!options.colors.scissors) options.colors.scissors = "SUCCESS";

    if (!options.winMessage) options.winMessage = "{{user}} You won";
    if (!options.loseMessage)
        options.loseMessage = "{{user}} You lose. The Bot wins";
    if (!options.tieMessage) options.tieMessage = "Time is up. It's a tie";
    if (!options.chooseMessage) options.chooseMessage = "You choose";
    if (!options.botMessage) options.botMessage = "Bot chooses";
    if (!options.ongoingMessage)
        options.ongoingMessage = "You already have a game in progress";

    // errors
    if (typeof options.tieMessage !== "string")
        throw new TypeError("Leaf-utils: tieMessage must be a string.");
    if (typeof options.ongoingMessage !== "string")
        throw new TypeError("Leaf-utils: ongoingMessage must be a string.");

    async function sendMessage(content) {
        if (options.slash_command) return options.message.editReply(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    if (cd.has(options.message.author.id))
        return sendMessage({
            content: options.ongoingMessage,
        });

    cd.add(options.message.author.id);

    setTimeout(() => {
        cd.delete(options.message.author.id);
    }, options.time);

    const button = new MessageActionRow().addComponents(
        new MessageButton()
            .setCustomId("rock")
            .setStyle(options.colors.rock)
            .setEmoji(options.emojis.rock),
        new MessageButton()
            .setCustomId("paper")
            .setStyle(options.colors.paper)
            .setEmoji(options.emojis.paper),
        new MessageButton()
            .setCustomId("scissors")
            .setStyle(options.colors.scissors)
            .setEmoji(options.emojis.scissors)
    );

    const rps = (i) =>
        i.user.id === options.message.author.id &&
        i.customId === "rock" &&
        i.customId === "paper" &&
        i.customId === "scissors";

    const collector = options.message.channel.createMessageComponentCollector({
        rps,
        time: options.time,
    });

    let score_u = 0;
    let score_b = 0;

    let rep = ["rock", "paper", "scissors"];
    let repdisplay = {
        rock: options.emojis.rock,
        paper: options.emojis.paper,
        scissors: options.emojis.scissors,
    };

    const embed = new MessageEmbed()
        .setTitle(options.embed.title)
        .setDescription(options.embed.description)
        .setColor(options.embed.color);

    const msg = await sendMessage({
        embeds: [embed],
        components: [button],
    });

    collector.on("collect", async (i) => {
        if (i.user.id === options.message.author.id) {
            let result = Math.floor(Math.random() * rep.length);

            if (rep[result] === i.customId) {
                const embed2 = new MessageEmbed()
                    .setTitle(options.embed.title)
                    .setDescription("It's a tie")
                    .addField(
                        options.chooseMessage,
                        `${repdisplay[i.customId]}`,
                        true
                    )
                    .addField(
                        options.botMessage,
                        `${repdisplay[rep[result]]}`,
                        true
                    )
                    .addField("Stats:", `**${score_u}**-**${score_b}**`)
                    .setColor(options.embed.color);

                await i.update({
                    embeds: [embed2],
                });
            } else if (rep[result] === rep[0]) {
                if (i.customId === rep[1]) {
                    const embed3 = new MessageEmbed()
                        .setTitle(options.embed.title)
                        .setDescription("You won")
                        .addField(
                            options.chooseMessage,
                            `${repdisplay[i.customId]}`,
                            true
                        )
                        .addField(
                            options.botMessage,
                            `${repdisplay[rep[result]]}`,
                            true
                        )
                        .addField("Stats:", `**${++score_u}**-**${score_b}**`)
                        .setColor(options.embed.color);

                    await i.update({
                        embeds: [embed3],
                    });
                }

                if (i.customId === rep[2]) {
                    const embed4 = new MessageEmbed()
                        .setTitle(options.embed.title)
                        .setDescription("You lose")
                        .addField(
                            options.chooseMessage,
                            `${repdisplay[i.customId]}`,
                            true
                        )
                        .addField(
                            options.botMessage,
                            `${repdisplay[rep[result]]}`,
                            true
                        )
                        .addField("Stats:", `**${score_u}**-**${++score_b}**`)
                        .setColor(options.embed.color);

                    await i.update({
                        embeds: [embed4],
                    });
                }
            } else if (rep[result] === rep[1]) {
                if (i.customId === rep[2]) {
                    const embed5 = new MessageEmbed()
                        .setTitle(options.embed.title)
                        .setDescription("You won")
                        .addField(
                            options.chooseMessage,
                            `${repdisplay[i.customId]}`,
                            true
                        )
                        .addField(
                            options.botMessage,
                            `${repdisplay[rep[result]]}`,
                            true
                        )
                        .addField("Stats:", `**${++score_u}**-**${score_b}**`)
                        .setColor(options.embed.color);

                    await i.update({
                        embeds: [embed5],
                    });
                }

                if (i.customId === rep[0]) {
                    const embed6 = new MessageEmbed()
                        .setTitle(options.embed.title)
                        .setDescription("You lose")
                        .addField(
                            options.chooseMessage,
                            `${repdisplay[i.customId]}`,
                            true
                        )
                        .addField(
                            options.botMessage,
                            `${repdisplay[rep[result]]}`,
                            true
                        )
                        .addField("Stats:", `**${score_u}**-**${++score_b}**`)
                        .setColor(options.embed.color);

                    await i.update({
                        embeds: [embed6],
                    });
                }
            } else if (rep[result] === rep[2]) {
                if (i.customId === rep[1]) {
                    const embed7 = new MessageEmbed()
                        .setTitle(options.embed.title)
                        .setDescription("You lose")
                        .addField(
                            options.chooseMessage,
                            `${repdisplay[i.customId]}`,
                            true
                        )
                        .addField(
                            options.botMessage,
                            `${repdisplay[rep[result]]}`,
                            true
                        )
                        .addField("Stats:", `**${score_u}**-**${++score_b}**`)
                        .setColor(options.embed.color);

                    await i.update({
                        embeds: [embed7],
                    });
                }

                if (i.customId === rep[0]) {
                    const embed8 = new MessageEmbed()
                        .setTitle(options.embed.title)
                        .setDescription("You won")
                        .addField(
                            options.chooseMessage,
                            `${repdisplay[i.customId]}`,
                            true
                        )
                        .addField(
                            options.botMessage,
                            `${repdisplay[rep[result]]}`,
                            true
                        )
                        .addField("Stats:", `**${++score_u}**-**${score_b}**`)
                        .setColor(options.embed.color);

                    await i.update({
                        embeds: [embed8],
                    });
                }
            }

            if (score_u === 3) {
                collector.stop();
                cd.delete(options.message.author.id);
            }
            if (score_b === 3) {
                collector.stop();
                cd.delete(options.message.author.id);
            }
        }
    });

    collector.on("end", () => {
        if (score_u + score_b === 0) {
            if (embed.description.includes("starts")) {
                return;
            } else {
                return msg.edit({
                    content: options.tieMessage,
                    components: disableButtons(msg.components),
                });
            }
        }

        if (score_u + score_b > 0) {
            if (score_u === score_b) {
                cd.delete(options.message.author.id);
                return msg.edit({
                    content: options.tieMessage,
                    components: disableButtons(msg.components),
                });
            }
        }

        if (score_u > score_b) {
            cd.delete(options.message.author.id);
            msg.edit({
                content: options.winMessage.replace(
                    "{{user}}",
                    `${options.message.author.tag}`
                ),
                components: disableButtons(msg.components),
            });
        } else {
            cd.delete(options.message.author.id);
            return msg.edit({
                content: options.loseMessage.replace(
                    "{{user}}",
                    `${options.message.author.tag}`
                ),
                components: disableButtons(msg.components),
            });
        }
    });
};
