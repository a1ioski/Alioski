const Discord = require("discord.js");
const fetch = require("node-fetch");
const { decode } = require("../functions");

module.exports = async (options) => {
    try {
        if (!options.message)
            throw new TypeError(
                "NO_MESSAGE: Please provide a message arguement"
            );
        if (typeof options.message !== "object")
            throw new TypeError(
                "INVALID_MESSAGE: Invalid Discord Message object was provided."
            );
        if (!options.slash_command) options.slash_command = false;
        if (typeof options.slash_command !== "boolean")
            throw new TypeError(
                "INVALID_COMMAND_TYPE: Slash command must be a boolean."
            );
        if (!options.difficulty) options.difficulty = "easy";
        if (!options.time) options.time = 60000;
        if (parseInt(options.time) < 30000)
            throw new Error(
                "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
            );
        if (typeof options.time !== "number")
            throw new TypeError("Leaf-utils: time must be a number.");

        if (!options.embed) options.embed = {};
        if (!options.embed.title) options.embed.title = "Trivia";
        if (!options.embed.description)
            options.embed.description = "You have 1 minute to guess the answer";
        if (!options.embed.color) options.embed.color = "RANDOM";

        if (!options.emojis) options.emojis = {};
        if (!options.emojis.one) options.emojis.one = "1️⃣";
        if (!options.emojis.two) options.emojis.two = "2️⃣";
        if (!options.emojis.three) options.emojis.three = "3️⃣";
        if (!options.emojis.four) options.emojis.four = "4️⃣";

        if (!options.loadMessage) options.loadMessage = "I'm thinking..";
        if (!options.winMessage)
            options.winMessage = "GG, You win. The answer was {{answer}}";
        if (!options.loseMessage)
            options.loseMessage = "You lose. The answer was {{answer}}";
        if (!options.authorOnly)
            options.authorOnly = "Only <@{{author}}> can use these buttons!";

        async function sendMessage(content) {
            if (options.slash_command)
                return options.message.editReply(content);
            else return options.message.channel.send(content);
        }

        if (options.slash_command) {
            if (!options.message.deferred) await options.message.deferReply();
            options.message.author = options.message.user;
        }

        const difficulty = options.difficulty;

        const trivia = await sendMessage({
            embeds: [
                new Discord.MessageEmbed()
                    .setTitle(options.embed.title)
                    .setDescription(options.loadMessage)
                    .setColor(options.embed.color),
            ],
        });

        const triviaData = await fetch(
            `https://opentdb.com/api.php?amount=1&type=multiple&difficulty=${difficulty}`
        )
            .then((res) => res.json())
            .then((res) => res.results[0]);
        const choices = [];

        triviaData.incorrect_answers.forEach((answer) => choices.push(answer));
        choices.push(triviaData.correct_answer);

        shuffle(choices);

        let number = 0;
        const triviaEmbed = new Discord.MessageEmbed()
            .setTitle(options.embed.title)
            .setDescription(
                `**${decode(triviaData.question)}**\n${
                    options.embed.description
                }\n\n${choices
                    .map((choice) => {
                        number++;
                        return `**${number}**) ${decode(choice)}`;
                    })
                    .join("\n")}`
            )
            .setColor(options.embed.color);

        const answer1B = new Discord.MessageButton()
            .setEmoji(options.emojis.one)
            .setCustomId(`1`)
            .setStyle("SECONDARY");

        const answer2B = new Discord.MessageButton()
            .setEmoji(options.emojis.two)
            .setCustomId(`2`)
            .setStyle("SECONDARY");

        const answer3B = new Discord.MessageButton()
            .setEmoji(options.emojis.three)
            .setCustomId(`3`)
            .setStyle("SECONDARY");

        const answer4B = new Discord.MessageButton()
            .setEmoji(options.emojis.four)
            .setCustomId(`4`)
            .setStyle("SECONDARY");

        await trivia.edit({
            embeds: [triviaEmbed],
            components: [
                {
                    type: 1,
                    components: [answer1B, answer2B, answer3B, answer4B],
                },
            ],
            fetchReply: true,
        });

        const collector = trivia.createMessageComponentCollector({
            componentType: "BUTTON",
            time: options.time,
        });

        collector.on("collect", async (interaction) => {
            if (interaction.user.id !== options.message.author.id)
                return interaction.reply({
                    content: options.authorOnly.replace(
                        "{{author}}",
                        options.message.member.id
                    ),
                    ephemeral: true,
                });

            interaction.deferUpdate();

            const winningNumber = choices.indexOf(triviaData.correct_answer);

            if (parseInt(interaction.customId) - 1 === winningNumber) {
                triviaEmbed
                    .addField(
                        "\u200B",
                        options.winMessage.replace(
                            "{{answer}}",
                            `${decode(triviaData.correct_answer)}`
                        )
                    )
                    .setColor("GREEN");
            } else {
                triviaEmbed
                    .addField(
                        "\u200B",
                        options.loseMessage.replace(
                            "{{answer}}",
                            `${decode(triviaData.correct_answer)}`
                        )
                    )
                    .setColor("RED");

                if (parseInt(interaction.customId) - 1 === 0) {
                    answer1B.setStyle("DANGER");
                } else if (parseInt(interaction.customId) - 1 === 1) {
                    answer2B.setStyle("DANGER");
                } else if (parseInt(interaction.customId) - 1 === 2) {
                    answer3B.setStyle("DANGER");
                } else if (parseInt(interaction.customId) - 1 === 3) {
                    answer4B.setStyle("DANGER");
                }
            }

            if (winningNumber === 0) {
                answer1B.setStyle("SUCCESS");
            } else if (winningNumber === 1) {
                answer2B.setStyle("SUCCESS");
            } else if (winningNumber === 2) {
                answer3B.setStyle("SUCCESS");
            } else if (winningNumber === 3) {
                answer4B.setStyle("SUCCESS");
            }

            await trivia.edit({
                embeds: [triviaEmbed],
                components: [
                    {
                        type: 1,
                        components: [
                            answer1B.setDisabled(true),
                            answer2B.setDisabled(true),
                            answer3B.setDisabled(true),
                            answer4B.setDisabled(true),
                        ],
                    },
                ],
            });
        });

        collector.on("end", async (interaction) => {
            await trivia.edit({
                components: [
                    {
                        type: 1,
                        components: [
                            answer1B.setDisabled(true),
                            answer2B.setDisabled(true),
                            answer3B.setDisabled(true),
                            answer4B.setDisabled(true),
                        ],
                    },
                ],
            });
        });
    } catch (e) {}
};

function shuffle(array) {
    let currentIndex = array.length,
        randomIndex;

    while (currentIndex !== 0) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;

        [array[currentIndex], array[randomIndex]] = [
            array[randomIndex],
            array[currentIndex],
        ];
    }

    return array;
}
