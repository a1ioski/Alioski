const Discord = require("discord.js");
const { disableButtons } = require("../functions");

module.exports = async (options) => {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (!options.time) options.time = 60000;
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");

    if (!options.embed) options.embed = {};
    if (!options.embed.title) options.embed.title = "Slot Machine";
    if (!options.embed.wincolor) options.embed.wincolor = "GREEN";
    if (!options.embed.losecolor) options.embed.losecolor = "RED";

    if (!options.button) options.button = {};
    if (!options.button.label) options.button.label = "Spin";
    if (!options.button.style) options.button.style = "DANGER";
    if (!options.button.emoji) options.button.emoji = null;

    if (!options.winMessage) options.winMessage = "GG! You win";
    if (!options.loseMessage) options.loseMessage = "You lose.";
    if (!options.authorOnly)
        options.authorOnly = "Only <@{{author}}> can use this button!";

    async function sendMessage(content) {
        if (options.slash_command) return options.message.editReply(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    let spinButton = new Discord.MessageButton()
        .setCustomId("spin")
        .setLabel(options.button.label)
        .setEmoji(options.button.emoji)
        .setStyle(options.button.style);

    let row = new Discord.MessageActionRow().addComponents(spinButton);

    const sent = await sendMessage({
        embeds: [slot(options)],
        components: [row],
        fetchReply: true,
    });

    const collector = sent.createMessageComponentCollector({
        componentType: "BUTTON",
        time: options.time,
    });

    collector.on("collect", async (collected) => {
        if (collected.user.id !== options.message.author.id)
            return collected.reply({
                content: options.authorOnly.replace(
                    "{{author}}",
                    options.message.member.id
                ),
                ephemeral: true,
            });
        collector.resetTimer({
            time: options.time,
        });

        await collected.deferUpdate();

        if (collected.customId == "spin")
            return sent.edit({
                embeds: [slot(options)],
            });
    });

    collector.on("end", (collected) => {
        sent.edit({
            components: disableButtons(sent.components),
        });
    });
};

function slot(options) {
    const choices = ["🍇", "🍒", "🍋", "🍊", "🍎", "🍔", "🍕", "🍫"];
    var slots = [];

    for (i = 1; i < 10; i++) {
        slots[i] = choices[Math.floor(Math.random() * choices.length)];
    }

    const slotEmbed = new Discord.MessageEmbed()
        .setFooter({
            text: options.message.author.tag + " ➔ " + options.winMessage,
            iconURL: options.message.author.displayAvatarURL({
                dynamic: true,
            }),
        })
        .addField(
            options.embed.title,
            "```" +
                "\n------------------\n" +
                `${slots[1]} | ${slots[2]} | ${slots[3]}\n${slots[4]} | ${slots[5]} | ${slots[6]}\n${slots[7]} | ${slots[8]} | ${slots[9]}` +
                " \n------------------\n" +
                "```"
        );
    if (
        (slots[1] === slots[2] && slots[1] === slots[3]) ||
        (slots[4] === slots[5] && slots[4] === slots[6]) ||
        (slots[7] === slots[8] && slots[7] === slots[9]) ||
        (slots[1] === slots[4] && slots[1] === slots[7]) ||
        (slots[2] === slots[5] && slots[2] === slots[8]) ||
        (slots[3] === slots[6] && slots[3] === slots[9]) ||
        (slots[1] === slots[5] && slots[1] === slots[9]) ||
        (slots[3] === slots[5] && slots[3] === slots[7])
    ) {
        slotEmbed.setColor(options.embed.wincolor);
    } else {
        slotEmbed
            .setFooter({
                text: options.message.author.tag + " ➔ " + options.loseMessage,
                iconURL: options.message.author.displayAvatarURL({
                    dynamic: true,
                }),
            })
            .setColor(options.embed.losecolor);
    }
    return slotEmbed;
}
