const math = require("mathjs");
const { MessageActionRow, MessageButton, MessageEmbed } = require("discord.js");
const { disableButtons } = require("../functions");

module.exports = async (options) => {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (!options.time) options.time = 60000;
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");

    if (!options.embed) options.embed = {};
    if (!options.embed.title) options.embed.title = "Calculator";
    if (!options.embed.color) options.embed.color = "RANDOM";

    if (!options.invalidQuery)
        options.invalidQuery = "The provided equation is not valid";
    if (!options.authorOnly)
        options.authorOnly = "Only <@{{author}}> can use these buttons!";

    async function sendMessage(content) {
        if (options.slash_command) return options.message.editReply(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    const rows = [
        new MessageActionRow().addComponents([
            new MessageButton({
                customId: "(",
                style: "PRIMARY",
                label: "(",
            }),
            new MessageButton({
                customId: ")",
                style: "PRIMARY",
                label: ")",
            }),
            new MessageButton({
                customId: "clear",
                style: "DANGER",
                label: "AC",
            }),
            new MessageButton({
                customId: "backspace",
                style: "DANGER",
                label: "โซ",
            }),
        ]),
        new MessageActionRow().addComponents([
            new MessageButton({
                customId: "7",
                style: "SECONDARY",
                label: "7",
            }),
            new MessageButton({
                customId: "8",
                style: "SECONDARY",
                label: "8",
            }),
            new MessageButton({
                customId: "9",
                style: "SECONDARY",
                label: "9",
            }),
            new MessageButton({
                customId: "/",
                style: "PRIMARY",
                label: "รท",
            }),
        ]),
        new MessageActionRow().addComponents([
            new MessageButton({
                customId: "4",
                style: "SECONDARY",
                label: "4",
            }),
            new MessageButton({
                customId: "5",
                style: "SECONDARY",
                label: "5",
            }),
            new MessageButton({
                customId: "6",
                style: "SECONDARY",
                label: "6",
            }),
            new MessageButton({
                customId: "*",
                style: "PRIMARY",
                label: "*",
            }),
        ]),
        new MessageActionRow().addComponents([
            new MessageButton({
                customId: "1",
                style: "SECONDARY",
                label: "1",
            }),
            new MessageButton({
                customId: "2",
                style: "SECONDARY",
                label: "2",
            }),
            new MessageButton({
                customId: "3",
                style: "SECONDARY",
                label: "3",
            }),
            new MessageButton({
                customId: "-",
                style: "PRIMARY",
                label: "-",
            }),
        ]),
        new MessageActionRow().addComponents([
            new MessageButton({
                customId: "0",
                style: "SECONDARY",
                label: "0",
            }),
            new MessageButton({
                customId: ".",
                style: "PRIMARY",
                label: ".",
            }),
            new MessageButton({
                customId: "result",
                style: "SUCCESS",
                label: "=",
            }),
            new MessageButton({
                customId: "+",
                style: "PRIMARY",
                label: "+",
            }),
        ]),
    ];

    const embed = new MessageEmbed()
        .setTitle(options.embed.title)
        .setDescription("```\n0\n```")
        .setColor(options.embed.color);

    const msg = await sendMessage({
        embeds: [embed],
        components: rows,
        fetchReply: true,
    });

    let data = "";

    const col = msg.createMessageComponentCollector({
        time: options.time,
    });

    col.on("collect", async (i) => {
        let extra = "";
        if (i.user.id !== options.message.author.id)
            return i.reply({
                content: options.authorOnly.replace(
                    "{{author}}",
                    options.message.member.id
                ),
                ephemeral: true,
            });
        if (i.customId === "result") {
            try {
                data = math.evaluate(data).toString();
            } catch (e) {
                data = "";
                extra = options.invalidQuery;
            }
        } else if (i.customId === "clear") {
            data = "";
            extra = "0";
        } else if (i.customId === "backspace") {
            data = data.slice(0, data.length - 1);
            if (data === "") data = " ";
        } else {
            const lc = data[data.length - 1];

            data +=
                `${
                    ((parseInt(i.customId) == i.customId ||
                        i.customId === ".") &&
                        (lc == parseInt(lc) || lc === ".")) ||
                    data.length === 0
                        ? ""
                        : " "
                }` + i.customId;
        }

        i.update({
            embeds: [embed.setDescription(`\`\`\`\n${data || extra}\n\`\`\``)],
        });
    });

    col.on("end", (i) => {
        msg.edit({
            components: disableButtons(msg.components),
        });
    });
};
