const { MessageSelectMenu, MessageActionRow } = require("discord.js");

module.exports = async (options) => {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (typeof options.authorOnly.enabled !== "boolean")
        throw new TypeError("INVALID_COMMAND_TYPE: enabled must be a boolean.");
    if (typeof options.authorOnly.ephemeral !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: ephemeral must be a boolean."
        );
    if (!options.time) options.time = 60000;
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");
    if (
        !Array.isArray(options.pages) ||
        !Array.isArray(options.options) ||
        options.pages.length < 1 ||
        options.pages.length !== options.options.length
    )
        throw new TypeError("Invalid Parameters");

    if (!options.authorOnly) options.authorOnly = {};
    if (!options.authorOnly.enabled) options.authorOnly.enabled = false;
    if (!options.authorOnly.ephemeral) options.authorOnly.ephemeral = false;
    if (!options.authorOnly.authorMessage)
        options.authorOnly.authorMessage = "You can't use this menu";

    if (!options.placeholder) options.placeholder = "Select Menus";

    async function sendMessage(content) {
        if (options.slash_command) return options.message.editReply(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    const menu = new MessageSelectMenu({
        customId: "menu_1",
        placeholder: options.placeholder,
        options: options.options.map((v, i) => {
            v.value = i.toString();

            return v;
        }),
    });

    let index = 0;

    const data = {
            fetchReply: true,
            components: [new MessageActionRow().addComponents(menu)],
            embeds: [options.pages[index]],
        },
        msg = await sendMessage(data);

    const collector = msg.createMessageComponentCollector({
        componentType: "SELECT_MENU",
        time: options.time,
    });

    collector.on("collect", async (i) => {
        if (options.authorOnly.enabled) {
            if (i.user.id !== options.message.author.id)
                return i.reply({
                    content: options.authorOnly.authorMessage.replace(
                        "{{author}}",
                        options.message.member.id
                    ),
                    ephemeral: options.authorOnly.ephemeral ? true : false,
                });
        }

        index = parseInt(i.values[0]);

        menu.options = menu.options.map((v) => {
            v.default = v.value === index.toString();

            return v;
        });

        i.update({
            embeds: [options.pages[index]],
            components: [new MessageActionRow().addComponents(menu)],
        });
    });

    collector.on("end", () => {
        menu.setDisabled(true);
        msg.edit({
            components: [new MessageActionRow().addComponents(menu)],
        });
    });
};
