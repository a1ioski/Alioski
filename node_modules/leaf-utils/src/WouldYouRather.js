const { MessageEmbed, MessageButton, MessageActionRow } = require("discord.js");
const fetch = require("node-fetch");

module.exports = async (options) => {
  try {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (!options.time) options.time = 60000;
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");

    if (!options.embed) options.embed = {};
    if (!options.embed.title) options.embed.title = "Would You Rather";
    if (!options.embed.color) options.embed.color = "RANDOM";

    if (!options.emojis) options.emojis = {};
    if (!options.emojis.firstbutton) options.emojis.firstbutton = "1️⃣";
    if (!options.emojis.secondbutton) options.emojis.secondbutton = "2️⃣";

    if (!options.colors) options.colors = {};
    if (!options.colors.firstbutton) options.colors.firstbutton = "PRIMARY";
    if (!options.colors.secondbutton) options.colors.secondbutton = "SUCCESS";

    if (!options.authorOnly)
        options.authorOnly = "Only <@{{author}}> can use these buttons!";

    async function sendMessage(content) {
        if (options.slash_command) return options.message.editReply(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    let lin = await fetch("http://api.xaliks.xyz/random/wyr").then((res) =>
        res.json()
    );

    let [q1, q2] = lin.questions;
    let btn = new MessageActionRow().addComponents(
        new MessageButton()
            .setStyle(options.colors.firstbutton)
            .setEmoji(options.emojis.firstbutton)
            .setCustomId("wyr-a"),
        new MessageButton()
            .setStyle(options.colors.secondbutton)
            .setCustomId("wyr-b")
            .setEmoji(options.emojis.secondbutton)
    );

    let emb = new MessageEmbed()
        .setTitle(options.embed.title)
        .addField(options.emojis.firstbutton, q1.question, true)
        .addField(options.emojis.secondbutton, q2.question, true)
        .setColor(options.embed.color);

    const msg = await sendMessage({
        embeds: [emb],
        components: [btn],
        fetchReply: true,
    });

    const collector = msg.createMessageComponentCollector({
        time: options.time,
    });

    collector.on("collect", async (i) => {
        if (i.user.id !== options.message.author.id)
            return i.reply({
                content: options.authorOnly.replace(
                    "{{author}}",
                    options.message.member.id
                ),
                ephemeral: true,
            });

        await i.deferUpdate();

        if (i.customId === "wyr-a") {
            btn.components[0]
                .setDisabled(true)
                .setLabel(`${q1.percentage}%`)
                .setStyle(options.colors.firstbutton);
            btn.components[1]
                .setDisabled(true)
                .setLabel(`${q2.percentage}%`)
                .setStyle("SECONDARY");

            i.message.edit({
                embeds: [emb],
                components: [btn],
            });
        }

        if (i.customId === "wyr-b") {
            btn.components[0]
                .setDisabled(true)
                .setLabel(`${q1.percentage}%`)
                .setStyle("SECONDARY");
            btn.components[1]
                .setDisabled(true)
                .setLabel(`${q2.percentage}%`)
                .setStyle(options.colors.secondbutton);

            i.message.edit({
                embeds: [emb.setColor("ORANGE")],
                components: [btn],
            });
        }
    });

    collector.on("end", async () => {
        btn.components[0].setDisabled(true).setLabel(`${q1.percentage}%`);
        btn.components[1].setDisabled(true).setLabel(`${q2.percentage}%`);
        await msg.edit({
            embeds: [emb],
            components: [btn],
        });
    });
  } catch(e) {}
};