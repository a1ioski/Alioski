const Discord = require("discord.js");

module.exports = async (options) => {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (!options.time) options.time = 60000;

    if (!options.embed) options.embed = {};
    if (!options.embed.title) options.embed.title = "Tic Tac Toe";
    if (!options.embed.color) options.embed.color = "RANDOM";

    if (!options.challenge) options.challenge = {};
    if (!options.challenge.acceptButton)
        options.challenge.acceptButton = "Accept";
    if (!options.challenge.denyButton) options.challenge.denyButton = "Deny";

    if (!options.emojis) options.emojis = {};
    if (!options.emojis.xEmoji) options.emojis.xEmoji = "‚ùå";
    if (!options.emojis.oEmoji) options.emojis.oEmoji = "üîµ";

    if (!options.colors) options.colors = {};
    if (!options.colors.xEmoji) options.colors.xEmoji = "SUCCESS";
    if (!options.colors.oEmoji) options.colors.oEmoji = "DANGER";

    if (!options.noUser) options.noUser = "You must mention someone";
    if (!options.acceptMessage)
        options.acceptMessage = "{{player}} has challenged you {{opponent}}";
    if (!options.cancelMessage)
        options.cancelMessage =
            "{{opponent}} refused to have a fight with you!";
    if (!options.endMessage)
        options.endMessage = "Challenge not accepted in time";
    if (!options.authorOnly) options.authorOnly = "You can't use these buttons";

    // errors
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");
    if (typeof options.challenge.acceptButton !== "string")
        throw new TypeError("accept button text must be a string.");
    if (typeof options.challenge.denyButton !== "string")
        throw new TypeError("deny button text must be a string.");
    if (typeof options.acceptMessage !== "string")
        throw new TypeError("acceptMessage must be a string.");
    if (typeof options.cancelMessage !== "string")
        throw new TypeError("cancelMessage must be a string.");

    async function sendMessage(content) {
        if (options.slash_command) return options.message.followUp(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    const p1 = options.message.member;
    const p2 = options.opponent;
    var turn = options.emojis.xEmoji;
    let buttons = [];

    if (!p2) return sendMessage(options.noUser);

    let yesButton = new Discord.MessageButton()
        .setStyle("SUCCESS")
        .setCustomId("yes_fc")
        .setLabel(options.challenge.acceptButton);

    let noButton = new Discord.MessageButton()
        .setStyle("DANGER")
        .setCustomId("no_fc")
        .setLabel(options.challenge.denyButton);

    const embed = new Discord.MessageEmbed()
        .setTitle(`${p1.user.tag} vs ${p2.tag}`)
        .addField("Turn", p1.user.tag)
        .addField("Emoji", turn)
        .setFooter({
            text: p1.user.username,
            iconURL: p1.displayAvatarURL(),
        })
        .setColor(options.embed.color)
        .setTimestamp();

    for (let i = 0; i < 9; i++) {
        buttons[i] = new Discord.MessageButton()
            .setCustomId((i + 1).toString())
            .setLabel(" ")
            .setStyle("SECONDARY");
    }

    let row = new Discord.MessageActionRow().addComponents([
        yesButton,
        noButton,
    ]);
    let row1 = new Discord.MessageActionRow().addComponents(
        buttons[0],
        buttons[1],
        buttons[2]
    );
    let row2 = new Discord.MessageActionRow().addComponents(
        buttons[3],
        buttons[4],
        buttons[5]
    );
    let row3 = new Discord.MessageActionRow().addComponents(
        buttons[6],
        buttons[7],
        buttons[8]
    );

    const confirmation = await sendMessage({
        embeds: [
            {
                title: options.embed.title,
                color: options.embed.color,
                description: options.acceptMessage
                    .replace("{{player}}", p1)
                    .replace("{{opponent}}", p2),
            },
        ],
        components: [row],
    });

    const confirmationCollector = confirmation.createMessageComponentCollector({
        componentType: "BUTTON",
        time: options.time,
    });

    confirmationCollector.on("collect", async (button) => {
        if (button.user.id !== p2.id) {
            return button.reply({
                content: options.authorOnly,
                ephemeral: true,
            });
        }

        if (button.customId === "yes_fc") {
            button.deferUpdate();
            yesButton.setDisabled();
            noButton = noButton
                .setStyle("DANGER")
                .setCustomId("no_fc")
                .setDisabled();

            row = new Discord.MessageActionRow().addComponents([
                yesButton,
                noButton,
            ]);

            confirmation
                .edit({
                    content: `${p2} accepted your challenge`,
                    embeds: [],
                    components: [row],
                })
                .then((reply) => {
                    setTimeout(() => {
                        reply.delete();
                    }, 5000);
                })
                .catch(() => {});

            const sent = await sendMessage({
                embeds: [embed],
                components: [row1, row2, row3],
            });

            const mainCollector = sent.createMessageComponentCollector({
                componentType: "BUTTON",
                time: options.time,
            });

            mainCollector.on("collect", async (button) => {
                if (![p1.id, p2.id].includes(button.user.id)) {
                    return button.reply({
                        content: options.authorOnly,
                        ephemeral: true,
                    });
                }

                button.deferUpdate();

                if (turn === options.emojis.xEmoji && button.user.id !== p1.id)
                    return;
                if (turn === options.emojis.oEmoji && button.user.id !== p2.id)
                    return;

                const id = button.customId;
                buttons[id - 1].setEmoji(turn);
                buttons[id - 1].setDisabled(true);
                buttons[id - 1].setStyle(
                    turn === options.emojis.xEmoji
                        ? options.colors.xEmoji
                        : options.colors.oEmoji
                );

                if (checkWin(buttons) === true) {
                    mainCollector.stop("won");
                    const embed3 = new Discord.MessageEmbed()
                        .setTitle(`${p1.user.tag} vs ${p2.tag}`)
                        .addField(
                            "Winner",
                            turn === options.emojis.xEmoji
                                ? p1.user.username
                                : p2.username
                        )
                        .setFooter({
                            text:
                                turn === options.emojis.xEmoji
                                    ? p1.user.username
                                    : p2.username,
                            iconURL:
                                turn === options.emojis.xEmoji
                                    ? p1.displayAvatarURL()
                                    : p2.displayAvatarURL(),
                        })
                        .setColor(options.embed.color)
                        .setTimestamp();

                    for (let i = 0; i < 9; i++) {
                        buttons[i].setDisabled(true);
                    }

                    sent.edit({
                        embeds: [embed3],
                        components: [row1, row2, row3],
                    });
                } else {
                    mainCollector.resetTimer({
                        time: options.time,
                    });

                    if (turn == options.emojis.xEmoji) {
                        turn = options.emojis.oEmoji;
                        const embed1 = new Discord.MessageEmbed()
                            .setTitle(`${p1.user.tag} vs ${p2.tag}`)
                            .addField("Turn", p2.tag)
                            .addField("Emoji", turn)
                            .setFooter({
                                text: p2.username,
                                iconURL: p2.displayAvatarURL(),
                            })
                            .setColor(options.embed.color)
                            .setTimestamp();

                        sent.edit({
                            embeds: [embed1],
                            components: [row1, row2, row3],
                        });
                    } else {
                        turn = options.emojis.xEmoji;
                        const embed2 = new Discord.MessageEmbed()
                            .setTitle(`${p1.user.tag} vs ${p2.tag}`)
                            .addField("Turn", p1.user.tag)
                            .addField("Emoji", turn)
                            .setFooter({
                                text: p1.user.username,
                                iconURL: p1.displayAvatarURL(),
                            })
                            .setColor(options.embed.color)
                            .setTimestamp();

                        sent.edit({
                            embeds: [embed2],
                            components: [row1, row2, row3],
                        });
                    }
                }
                mainCollector.on("end", (button, reason) => {
                    for (let i = 0; i < 9; i++) {
                        buttons[i].setDisabled(true);
                    }
                    if (reason === "time") {
                        sent.edit({
                            components: [row1, row2, row3],
                        });
                    }
                });
            });
        } else {
            button.deferUpdate();
            yesButton = yesButton
                .setStyle("SUCCESS")
                .setCustomId("yes_fc")
                .setDisabled();
            noButton.setDisabled();

            row = new Discord.MessageActionRow().addComponents([
                yesButton,
                noButton,
            ]);

            return confirmation
                .edit({
                    embeds: [
                        {
                            title: options.embed.title,
                            color: options.embed.color,
                            description: options.cancelMessage.replace(
                                "{{opponent}}",
                                p2
                            ),
                        },
                    ],
                    components: [row],
                })
                .then((reply) => {
                    setTimeout(() => {
                        reply.delete();
                    }, 10000);
                })
                .catch(() => {});
        }
    });

    confirmationCollector.on("end", async (button, reason) => {
        row.components[0].setDisabled(true);
        row.components[1].setDisabled(true);
        if (reason === "time") {
            confirmation.edit({
                content: options.endMessage,
                components: [row],
            });
        }
    });
};

function checkWin(buttons) {
    for (var i = 0; i < 3; i++) {
        if (
            buttons[i * 3].emoji?.name === buttons[i * 3 + 1].emoji?.name &&
            buttons[i * 3].emoji?.name === buttons[i * 3 + 2].emoji?.name
        )
            if (
                buttons[i * 3].emoji &&
                buttons[i * 3 + 1].emoji &&
                buttons[i * 3 + 2].emoji
            )
                return true;
        if (
            buttons[i].emoji?.name === buttons[i + 3].emoji?.name &&
            buttons[i].emoji?.name === buttons[i + 6].emoji?.name
        )
            if (
                buttons[i].emoji &&
                buttons[i + 3].emoji &&
                buttons[i + 6].emoji
            )
                return true;
    }
    if (
        buttons[0].emoji?.name === buttons[4].emoji?.name &&
        buttons[0].emoji?.name === buttons[8].emoji?.name
    )
        if (buttons[0].emoji && buttons[4].emoji && buttons[8].emoji)
            return true;
    if (
        buttons[2].emoji?.name === buttons[4].emoji?.name &&
        buttons[2].emoji?.name === buttons[6].emoji?.name
    )
        if (buttons[2].emoji && buttons[4].emoji && buttons[6].emoji)
            return true;
}
