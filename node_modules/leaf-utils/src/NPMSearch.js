const { MessageEmbed, MessageActionRow, MessageButton } = require(`discord.js`);

module.exports = async (options) => {
    try {
        if (!options.message)
            throw new TypeError(
                "NO_MESSAGE: Please provide a message arguement"
            );
        if (typeof options.message !== "object")
            throw new TypeError(
                "INVALID_MESSAGE: Invalid Discord Message object was provided."
            );
        if (!options.slash_command) options.slash_command = false;
        if (typeof options.slash_command !== "boolean")
            throw new TypeError(
                "INVALID_COMMAND_TYPE: Slash command must be a boolean."
            );
        if (!options.args)
            throw new Error("Leaf-utils: args argument was not specified.");

        if (!options.embedColor) options.embedColor = "RANDOM";

        if (!options.query) options.query = "Give me a package name to search";
        if (!options.noResult) options.noResult = "I can't find this package";

        // errora
        if (typeof options.query !== "string")
            throw new TypeError("Leaf-utils: query must be a string.");
        if (typeof options.noResult !== "string")
            throw new TypeError("Leaf-utils: noResult must be a string.");

        async function sendMessage(content) {
            if (options.slash_command)
                return options.message.editReply(content);
            else return options.message.channel.send(content);
        }

        if (options.slash_command) {
            if (!options.message.deferred) await options.message.deferReply();
            options.message.author = options.message.user;
        }

        const fetch = require("node-fetch");
        const pkg = options.args.join(" ");
        const res = await fetch(`https://registry.npmjs.com/${pkg}`);
        const body = await res.json();

        if (!pkg)
            return sendMessage({
                content: options.query,
            });

        if (res.status === 404) {
            return sendMessage({
                content: options.noResult,
            });
        }

        if (body.time === undefined) {
            return sendMessage({
                content: "package unpublished",
            });
        }

        const version = body.versions[body["dist-tags"].latest];
        let deps = version.dependencies
            ? Object.keys(version.dependencies)
            : null;
        let maintainers = body.maintainers.map((user) => user.name);

        if (maintainers.length > 10) {
            const len = maintainers.length - 10;
            maintainers = maintainers.slice(0, 10);
            maintainers.push(`...${len} more.`);
        }

        if (deps && deps.length > 10) {
            const len = deps.length - 10;
            deps = deps.slice(0, 10);
            deps.push(`...${len} more.`);
        }

        const embed = new MessageEmbed()
            .setColor(options.embedColor)
            .setTitle(pkg)
            .setURL(`https://www.npmjs.com/package/${pkg}`)
            .setDescription(body.description || "No description")
            .addField("Version", body["dist-tags"].latest, true)
            .addField("License", body.license || "None", true)
            .addField(
                "Author",
                body.author ? body.author.name : "Unknown",
                true
            )
            .addField(
                "Modified",
                `${new Date(body.time.modified).toDateString()}`,
                true
            )
            .addField(
                "Dependencies",
                `${deps && deps.length ? deps.join(", ") : "None"}`,
                true
            )
            .addField("Main File", version.main || "index.js", true);

        const row = new MessageActionRow().addComponents(
            new MessageButton()
                .setURL(`https://www.npmjs.com/package/${pkg}`)
                .setStyle("LINK")
                .setLabel(pkg)
        );

        return sendMessage({
            embeds: [embed],
            components: [row],
        });
    } catch (err) {
        console.log(`Error Occured | NPM | Error: ${err.stack}`);
    }
};
