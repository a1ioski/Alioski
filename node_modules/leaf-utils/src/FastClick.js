const { MessageEmbed, MessageButton, MessageActionRow } = require("discord.js");

module.exports = async (options) => {
    if (!options.message)
        throw new TypeError("NO_MESSAGE: Please provide a message arguement");
    if (typeof options.message !== "object")
        throw new TypeError(
            "INVALID_MESSAGE: Invalid Discord Message object was provided."
        );
    if (!options.slash_command) options.slash_command = false;
    if (typeof options.slash_command !== "boolean")
        throw new TypeError(
            "INVALID_COMMAND_TYPE: Slash command must be a boolean."
        );
    if (!options.time) options.time = 60000;

    if (!options.embed) options.embed = {};
    if (!options.embed.title) options.embed.title = "Fast Click";
    if (!options.embed.color) options.embed.color = "RANDOM";

    if (!options.challenge) options.challenge = {};
    if (!options.challenge.acceptButton)
        options.challenge.acceptButton = "Accept";
    if (!options.challenge.denyButton) options.challenge.denyButton = "Deny";

    if (!options.buttons) options.buttons = {};
    if (!options.buttons.correctText)
        options.buttons.correctText = "Click this button";
    if (!options.buttons.wrongText)
        options.buttons.wrongText = "Do not click this";

    if (!options.colors) options.colors = {};
    if (!options.colors.correctButton) options.colors.correctButton = "SUCCESS";
    if (!options.colors.wrongButton) options.colors.wrongButton = "DANGER";

    if (!options.noUser) options.noUser = "You must mention someone";
    if (!options.startMessage)
        options.startMessage =
            "the button will appear in a few seconds, good luck";
    if (!options.mainMessage)
        options.mainMessage = "Click the correct button to win";
    if (!options.acceptMessage)
        options.acceptMessage = "{{player}} has challenged you {{opponent}}";
    if (!options.cancelMessage)
        options.cancelMessage =
            "{{opponent}} refused to have a fight with you!";
    if (!options.winMessage)
        options.winMessage = "{{winner}} win in {{time}} seconds!";
    if (!options.wrongClick)
        options.wrongClick =
            "{{winneruser}} win because {{loser}} clicked the wrong button";
    if (!options.endMessage)
        options.endMessage = "Challenge not accepted in time";
    if (!options.authorOnly) options.authorOnly = "You can't use these buttons";

    // errors
    if (parseInt(options.time) < 30000)
        throw new Error(
            "Leaf-utils: time argument must be greater than 30 Seconds (in ms)"
        );
    if (typeof options.time !== "number")
        throw new TypeError("Leaf-utils: time must be a number.");
    if (typeof options.challenge.acceptButton !== "string")
        throw new TypeError("accept button text must be a string.");
    if (typeof options.challenge.denyButton !== "string")
        throw new TypeError("deny button text must be a string.");
    if (typeof options.acceptMessage !== "string")
        throw new TypeError("acceptMessage must be a string.");
    if (typeof options.cancelMessage !== "string")
        throw new TypeError("cancelMessage must be a string.");

    async function sendMessage(content) {
        if (options.slash_command) return options.message.followUp(content);
        else return options.message.channel.send(content);
    }

    if (options.slash_command) {
        if (!options.message.deferred) await options.message.deferReply();
        options.message.author = options.message.user;
    }

    const user1 = options.message.member;
    const user2 = options.opponent;

    if (!user2) return sendMessage(options.noUser);

    let yesButton = new MessageButton()
        .setStyle("SUCCESS")
        .setCustomId("yes_fc")
        .setLabel(options.challenge.acceptButton);
    let noButton = new MessageButton()
        .setStyle("DANGER")
        .setCustomId("no_fc")
        .setLabel(options.challenge.denyButton);

    let row = new MessageActionRow().addComponents([yesButton, noButton]);

    const confirmation = await sendMessage({
        embeds: [
            {
                title: options.embed.title,
                color: options.embed.color,
                description: options.acceptMessage
                    .replace("{{player}}", user1)
                    .replace("{{opponent}}", user2),
            },
        ],
        components: [row],
    });

    const confirmationCollector = confirmation.createMessageComponentCollector({
        componentType: "BUTTON",
        time: options.time,
    });

    confirmationCollector.on("collect", async (button) => {
        if (button.user.id !== user2.id) {
            return button.reply({
                content: options.authorOnly,
                ephemeral: true,
            });
        }

        if (button.customId === "yes_fc") {
            button.deferUpdate();
            yesButton.setDisabled();

            noButton = noButton
                .setStyle("DANGER")
                .setCustomId("no_fc")
                .setDisabled();
            row = new MessageActionRow().addComponents([yesButton, noButton]);

            confirmation
                .edit({
                    content: `${user2} accepted your challenge`,
                    embeds: [],
                    components: [row],
                })
                .then((reply) => {
                    setTimeout(() => {
                        reply.delete();
                    }, 5000);
                })
                .catch(() => {});

            const mainMessage = await sendMessage(options.startMessage);

            let mainButton = new MessageButton()
                .setStyle(options.colors.correctButton)
                .setLabel(options.buttons.correctText)
                .setCustomId("correct-fc");

            let baitButton1 = new MessageButton()
                .setStyle(options.colors.wrongButton)
                .setLabel(options.buttons.wrongText)
                .setCustomId("wrong1-fc");

            let baitButton2 = new MessageButton()
                .setStyle(options.colors.wrongButton)
                .setLabel(options.buttons.wrongText)
                .setCustomId("wrong2-fc");

            let baitButton3 = new MessageButton()
                .setStyle(options.colors.wrongButton)
                .setLabel(options.buttons.wrongText)
                .setCustomId("wrong3-fc");

            let baitButton4 = new MessageButton()
                .setStyle(options.colors.wrongButton)
                .setLabel(options.buttons.wrongText)
                .setCustomId("wrong4-fc");

            let array = [
                mainButton,
                baitButton1,
                baitButton2,
                baitButton3,
                baitButton4,
            ].sort(() => Math.random() - 0.5);

            let mainRow = new MessageActionRow().addComponents(array);
            await sleep(2500);

            mainMessage.edit({
                components: [mainRow],
                content: options.mainMessage,
            });

            const now = new Date();

            const mainCollector = mainMessage.createMessageComponentCollector(
                (b) => b,
                {
                    time: options.time,
                }
            );

            mainCollector.on("collect", async (button) => {
                if (![user1.id, user2.id].includes(button.user.id)) {
                    return button.reply({
                        content: options.authorOnly,
                        ephemeral: true,
                    });
                }

                mainCollector.stop();

                if (button.customId !== "correct-fc") {
                    const loser = button.user.id;
                    const winner = loser === user1.id ? user2.id : user1.id;

                    mainButton.setDisabled();
                    baitButton1.setDisabled();
                    baitButton2.setDisabled();
                    baitButton3.setDisabled();
                    baitButton4.setDisabled();

                    array = array;
                    mainRow = new MessageActionRow().addComponents(array);
                    button.deferUpdate();

                    mainMessage.edit({
                        components: [mainRow],
                        content: options.wrongClick
                            .replace(
                                "{{winneruser}}",
                                `<@${
                                    [user1.id, user2.id].filter(
                                        (val) => val !== loser
                                    )[0]
                                }>`
                            )
                            .replace("{{loser}}", `<@${loser}>`),
                    });
                    return;
                }

                if (![user1.id, user2.id].includes(button.user.id)) {
                    return button.reply({
                        content: options.authorOnly,
                        ephemeral: true,
                    });
                }

                const winner = button.user.id;

                mainButton.setDisabled();
                baitButton1.setDisabled();
                baitButton2.setDisabled();
                baitButton3.setDisabled();
                baitButton4.setDisabled();
                array = array;
                mainRow = new MessageActionRow().addComponents(array);
                button.deferUpdate();

                mainMessage.edit({
                    components: [mainRow],
                    content: options.winMessage
                        .replace("{{winner}}", `<@${winner}>`)
                        .replace("{{time}}", (Date.now() - now) / 1000),
                });
                return;
            });
        } else {
            button.deferUpdate();
            yesButton = yesButton
                .setStyle("SUCCESS")
                .setCustomId("yes_fc")
                .setDisabled();
            noButton.setDisabled();

            row = new MessageActionRow().addComponents([yesButton, noButton]);

            return confirmation
                .edit({
                    embeds: [
                        {
                            title: options.embed.title,
                            color: options.embed.color,
                            description: options.cancelMessage.replace(
                                "{{opponent}}",
                                user2
                            ),
                        },
                    ],
                    components: [row],
                })
                .then((reply) => {
                    setTimeout(() => {
                        reply.delete();
                    }, 5000);
                })
                .catch(() => {});
        }
    });

    confirmationCollector.on("end", async (button, reason) => {
        row.components[0].setDisabled(true);
        row.components[1].setDisabled(true);
        if (reason === "time") {
            confirmation.edit({
                content: options.endMessage,
                components: [row],
            });
        }
    });
};

function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
